#include <iostream>//standard output lib
#include <conio.h>//contains console commands
#include <windows.h>//windows api lib
#include <time.h> 
using namespace std;

const int length=100;

//GLOBAL VARIABLES
const int height=20;//height of the boundary
const int width=80;//width of boundary

int snake_x,snake_y;//snake coordinates
int fruit_x,fruit_y;//fruit coordinates

int playerScore;

int snakeTailX[length],snakeTailY[length];//array to store snake tail coordinates
int snakeTailLength;

enum snakesDirection { STOP=0, LEFT, RIGHT, UP, DOWN };//moving direction

snakesDirection sDir;

bool gameOver;//boolean for game over 

//function for game initialisation
void GameInit(){
	gameOver = false;
	sDir = STOP;
	snake_x=width/2;
	snake_y=height/2;
	srand(time(0));//pseaudo randomness generated by the current date 
	fruit_x=rand()%width;
	fruit_y=rand()%height;
	playerScore=0;
}

//rendering the game
void GameRender(string playerName){
	system("cls");//clearing console
	//creating top walls with 'X'
	for(int i=0;i<width+2;i++)
		cout<<"X";
	cout<<endl;
	//creating side walls
	for(int i=0;i<height;i++){
		for(int j=0;j<=width;j++){
			if(j==0 || j==width)cout<<"$";//side walls
			
			if(j==snake_x && i==snake_y)cout<<"O";//sake head
			else if(j==fruit_x && i==fruit_y)cout<<"#";//fruit
			else{//if not rendering snake nor fuit then render "o"
				bool prTail=false;
				for(int k=0;k<snakeTailLength;k++){
					if(snakeTailX[k]==j && snakeTailY[k]==i){
						cout<<"o";
						prTail=true;
					}
				}
				if(!prTail)cout<<" ";
			}
		}
		cout<<endl;
	}
	// Creating bottom walls with '-' 
	for (int i = 0; i < width + 2; i++) 
		cout << "X"; 
	cout << endl;
	// Display player score
	cout <<playerName<<"'s score: "<<playerScore<<endl;
}

//updating game state
void UpdateGame(){
	int prevX=snakeTailX[0];
	int prevY=snakeTailY[0];
	int prev2X,prev2Y;
	snakeTailX[0]=snake_x;//initiate first place in array to snake head
	snakeTailY[0]=snake_y;//initiate first place in array to snake head
	
	for(int i=1;i<snakeTailLength;i++){
		prev2X=snakeTailX[i];
		prev2Y=snakeTailY[i];
		snakeTailX[i]=prevX;
		snakeTailY[i]=prevY;
		prevX=prev2X;
		prevY=prev2Y;
	}
	
	switch (sDir) { //direction with coordinate update
	case LEFT: 
		snake_x--; 
		break; 
	case RIGHT: 
		snake_x++; 
		break; 
	case UP: 
		snake_y--; 
		break; 
	case DOWN: 
		snake_y++; 
		break; 
	} 
	//collision
	if(snake_x>=width || snake_x<0 || snake_y>height || snake_y<0)
		gameOver=true;//with walls
	
	for(int i=0;i<snakeTailLength;i++){
		if(snakeTailX[i]==snake_x && snakeTailY[i]==snake_y)
			gameOver=false;//collision of head with tail
	}
	
	//colision of head with fruit
	if(snake_x==fruit_x && snake_y==fruit_y){
		snakeTailLength+=1;
		playerScore+=1;
		fruit_x=rand()%width;
		fruit_y=rand()%height;
	}
}

//Difficulty setting
int SetDifficulty() 
{ 
	int dfc, choice; 
	cout << "\nSET DIFFICULTY\n1: Easy\n2: Medium\n3: hard "
			"\nNOTE: if not chosen or pressed any other "
			"key, the difficulty will be automatically set "
			"to medium\nChoose difficulty level: "; 
	cin >> choice; 
	switch (choice) { 
	case '1': 
		dfc = 50; 
		break; 
	case '2': 
		dfc = 100; 
		break; 
	case '3': 
		dfc = 150; 
		break; 
	default: 
		dfc = 100; 
	} 
	return dfc; 
} 

//User input handling
void UserInput() 
{ 
	// Checks if a key is pressed or not 
	if (_kbhit()) { 
		// Getting the pressed key 
		switch (_getch()) { 
		case 'q': 
			sDir = LEFT; 
			break; 
		case 'd': 
			sDir = RIGHT; 
			break; 
		case 'z': 
			sDir = UP; 
			break; 
		case 's': 
			sDir = DOWN; 
			break; 
		case 'x': 
			gameOver= true; 
			break; 
		} 
	} 
} 

// Main function / game looping function 
int main() 
{ 
	string playerName; 
	cout << "enter your name: "; 
	cin >> playerName; 
	int dfc = SetDifficulty(); 

	GameInit(); 
	while (!gameOver) { 
		GameRender(playerName); 
		UserInput(); 
		UpdateGame(); 
		// creating a delay for according to the chosen 
		// difficulty 
		Sleep(dfc); 
	} 

	return 0; 
}